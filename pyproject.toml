[build-system]
build-backend = "hatchling.build"
requires = [
  "hatchling==1.27.0",
]

[project]
name = "eva"
authors = [
  { name = "Panagiotis Kasnesis", email = "pkasnesis@thingenious.io" },
  { name= "Lazaros Toumanidis", email= "laztoum@protonmail.com" }
]
dynamic = ["version"]
readme = "README.md"
requires-python = ">=3.11,<3.14"

dependencies = [
    "aiosqlite==0.21.0",
    "aiofiles==24.1.0",
    "aiohttp>=3.12.13",
    "anthropic==0.57.1",
    "chromadb",
    "fastapi==0.116.0",
    "fpdf==1.7.2",
    "greenlet==3.2.3",
    "openai==1.93.2",
    "orjson==3.10.18",
    "pandas==2.3.1",
    "psycopg[binary,pool]>=3.2.9; sys_platform != 'win32'",
    "psycopg[binary,pool]>=3.2.9; sys_platform != 'linux' and platform_machine != 'arm64' and platform_machine != 'ARM64' and platform_machine != 'aarch64' and platform_machine != 'AARCH64'",
    "pydantic[email]==2.11.7",
    "pydantic-settings==2.10.1",
    "pyJWT[crypto]==2.10.1",
    "pysqlite3-binary==0.5.4; sys_platform == 'linux' and platform_machine != 'arm64' and platform_machine != 'aarch64' and platform_machine != 'ARM64' and platform_machine != 'AARCH64'",
    "python_dotenv==1.1.1",
    "reportlab==4.4.2",
    "python-docx==1.2.0",
    "odfpy==1.4.1",
    "PyMuPDF==1.26.3",
    "python-multipart==0.0.20",
    "pydantic>=2.11.7",
    "python-ulid==3.0.0",
    "qdrant-client==1.14.3",
    "langchain==0.3.26",
    "langchain_community==0.3.27",
    "faiss-cpu==1.11.0",
    "sentence-transformers==5.0.0",
    "uvicorn[standard]==0.35.0",
    "uvloop==0.21.0; sys_platform != 'win32'",
    "weaviate-client==4.15.4",
    "wsproto==1.2.0"
]

[project.optional-dependencies]
dev = [
  "autoflake==2.3.1",
  "bandit==1.8.6",
  "black[jupyter]==25.1.0",
  "build==1.2.2.post1",
  "flake8==7.3.0",
  "hatchling==1.27.0",
  "mypy==1.16.1",
  "pandas-stubs==2.3.0.250703",
  "mypy-extensions>=1.1.0",
  "pre-commit==4.2.0",
  "pydocstyle==6.3.0",
  "pylint==3.3.7",
  "ruff==0.12.2",
  "types-fpdf2==2.8.3.20250516",
  "types-toml==0.10.8.20240310",
  "yamllint==1.37.1",
]

test = [
  "httpx_ws==0.7.2",
  "pytest==8.4.1",
  "pytest-asyncio==1.0.0",
  "pytest-cov==6.2.1",
  "pytest-html==4.1.1",
  "pytest-sugar==1.0.0",
  "pytest-timeout==2.4.0",
  "pytest-xdist==3.7.0",
  "testcontainers==4.10.0",
]

docs = [
  "markdown-callouts==0.4.0",
  "mdx-include==1.4.2",
  "mdx_truly_sane_lists==1.3",
  "mkdocs==1.6.1",
  "mkdocs-autorefs==1.4.2",
  "mkdocs-macros-plugin==1.3.7",
  "mkdocs-material==9.6.14",
  "mkdocs-minify-html-plugin==0.3.1",
  "mkdocstrings[crystal,python]==0.29.1",
  "mkdocstrings-crystal==0.3.7",
  "mkdocstrings-python==1.16.12",
  "mkdocs-awesome-nav==3.1.2",
  "mkdocs-open-in-new-tab==1.0.8",
  "natsort==8.4.0",
]

[tool.hatch.version]
path = "eva/_version.py"

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.envs.default]
python = "3.13"
installer = "uv"
dependencies = ["eva[dev,test]"]

[tool.hatch.envs.default.scripts]

requirements = "python scripts/requirements.py"
header = "python scripts/header.py"

format-black = "black --config pyproject.toml eva tests scripts"
format-autoflake = "autoflake --in-place --remove-all-unused-imports --remove-unused-variables --recursive eva tests scripts"
format-ruff = "ruff format --config pyproject.toml eva tests scripts"
format = [
  "hatch run format-black",
  "hatch run format-autoflake",
  "hatch run format-ruff"
]

lint-black = "black --config pyproject.toml --check --diff eva tests scripts"
lint-mypy = "mypy --config pyproject.toml eva tests scripts"
lint-flake8 = "flake8 --config .flake8 eva tests scripts"
lint-bandit = "bandit -r -c pyproject.toml eva scripts"
lint-yamllint = "yamllint ."
lint-ruff = "ruff check --config pyproject.toml eva tests scripts"
lint-pylint = "pylint --rcfile=pyproject.toml eva tests scripts"
lint = [
  "hatch run lint-black",
  "hatch run lint-mypy",
  "hatch run lint-flake8",
  "hatch run lint-bandit",
  "hatch run lint-yamllint",
  "hatch run lint-ruff",
  "hatch run lint-pylint"
]

forlint = [
  "hatch run format",
  "hatch run lint"
]

pre-test = [
  "python -m ensurepip",
  "pip install --upgrade pip",
  "pip install -qq -r requirements/test.txt"
]

test = [
  "hatch run pre-test",
  "pytest -c pyproject.toml --cov=eva --cov-branch --cov-report=term-missing:skip-covered --cov-report=lcov:coverage/eva/lcov.info --cov-report=html:coverage/eva/html --cov-report=xml:coverage/eva/coverage.xml --junitxml=coverage/eva/xunit.xml tests",
]

clean = "python scripts/clean.py"

docs = "python -m mkdocs build -d site"
docs-live = "python -m mkdocs serve --watch mkdocs.yml --watch docs --watch eva --dev-addr localhost:8400"


[tool.hatch.envs.test]
inherit = true

[[tool.hatch.envs.test.matrix]]
python = ["3.10", "3.11", "3.12", "3.13"]


# black
[tool.black]
exclude = '''
/(
    \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | .local
  | _build
  | __init__.py
  | .local
  | avatar
)/
'''
include = '''
    \.pyi?$
'''
line-length = 80
skip-string-normalization = true

# mypy
[tool.mypy]
files = "."
show_error_codes = true
# xcode/dmypy: follow-imports=silent not supported
# follow_imports = "skip"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_subclassing_any = false
disallow_untyped_calls = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
exclude = [
  ".venv",
  ".local",
  "avatar",
]
ignore_missing_imports = false
no_implicit_reexport = true
platform = "linux"
plugins = [
  "pydantic.mypy",
]
strict_optional = true
warn_redundant_casts = true
warn_unused_configs = true
warn_unused_ignores = true

[[tool.mypy.overrides]]
module = "eva.tests.*"
# with python < 3.13 we get seem to get "call-arg" errors :(
# and with python>=3.13 "unused-ignore" : (
disable_error_code = ["call-arg"]

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true

# pylint
[tool.pylint.master]
extension-pkg-whitelist = []
load-plugins = [
  "pylint.extensions.mccabe",
  "pylint.extensions.redefined_variable_type",
  "pylint.extensions.broad_try_clause",
  "pylint.extensions.no_self_use",
  "pylint.extensions.docparams",
]
# reports=true
fail-under = 8.0
ignore = ["CVS"]
ignore-paths = [
  ".venv",
  ".local*",
  "avatar",
]
recursive = true

unsafe-load-any-extension = "no"

[tool.pylint.messages_control]
enable = ["c-extension-no-member"]
[tool.pylint.format]
max-line-length = 80
[tool.pylint.similarities]
ignore-imports = "yes"
ignore-signatures = "yes"
min-similarity-lines = 10
[tool.pylint.broad_try_clause]
max-try-statements = 3
[tool.pylint.design]
max-args = 11
max-attributes = 11
max-positional-arguments = 11
max-statements = 50
[tool.pylint.string]
check-quote-consistency = true
check-str-concat-over-line-jumps = true
[tool.pylint.parameter_documentation]
accept-no-param-doc = false
accept-no-raise-doc = false
accept-no-return-doc = false
accept-no-yields-doc = false
# Possible choices: ["sphinx", "epytext", "google", "numpy", "default"]
default-docstring-type = "numpy"

# bandit
[tool.bandit]
exclude_dirs = [
  ".venv",
  ".local",
  "avatar",
]
# B104: bind to all interfaces (0.0.0.0)
# B110: allow pass on try/except
# B404: allow import subprocess
# B602, B603: allow shell=True (subprocess,popen)
skips = ["B104", "B110", "B404", "B602", "B603"]
[tool.bandit.assert_used]
skips = ["*_test.py", "*/test_*.py"]

# ruff
[tool.ruff]
extend-exclude = [
  ".venv",
  ".local",
  "avatar",
  "docs",
]
line-length = 80

[tool.ruff.lint]
select = ["F", "Q", "D", "I", "G", "C4", "C90", "E", "W", "B"]
# # Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# # Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# exclude = ["*.pyi", "*.j2"]
# Like Black, use double quotes for strings.
quote-style = "double"
# Like Black, indent with spaces, rather than tabs.
indent-style = "space"
# Like Black, respect magic trailing commas.
docstring-code-format = true
line-ending = "lf"
skip-magic-trailing-comma = false

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.lint.isort]
force-wrap-aliases = true
combine-as-imports = true
split-on-trailing-comma = true

# pytest
[tool.pytest.ini_options]
addopts = """
    -d \
    -s \
    -n auto \
    --exitfirst \
    --durations=10 \
    --color=yes \
    --timeout=60
"""
asyncio_default_fixture_loop_scope = "session"
asyncio_mode = "auto"
filterwarnings = [
  # DeprecationWarning:
  #   Type google._upb._message.MessageMapContainer uses PyType_Spec with a metaclass that has custom tp_new.
  #   This is deprecated and will no longer be allowed in Python 3.14.
  "ignore::DeprecationWarning",
]
python_files = [
  "tests.py",
  "test_*.py",
  "*_tests.py",
]
pythonpath = ["."]

# coverage
[tool.coverage.run]
omit = [
  "example.py",
  "_version.py",
]
[tool.coverage.report]
exclude_lines = [
  "pragma: no cover",
  "if TYPE_CHECKING:",
  "if __name__ == .__main__.:",
]
# fail_under = 80
precision = 2
